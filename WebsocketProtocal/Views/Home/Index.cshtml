<div>
    Server is running ...
</div>
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Canvas Zoom and Pan</title>
    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
    <style>
        #canvasContainer {
            overflow: hidden;
            width: 100%;
            height: 500px; 
            position: relative;
        }

        #myCanvas {
            position: absolute;
            top: 0;
            left: 0;
        }
        .canvasinfo{
            float:left;
            width:30%;
            max-height:200px;
            overflow:scroll;
        }
        .canvasContainerbox{
            float:left;
            width:70%;
        }
    </style>
</head>
<body>
    <div class="canvasContainerbox">
        <div id="canvasContainer">
            <canvas id="myCanvas" width="700" height="600" style="border:1px solid" ></canvas>
        </div>
    </div> 
    <div class="canvasinfo">
        <ul id="messagesList"></ul>
    </div>
    <script src="script.js"></script>
</body>
</html>
<div class="test" style="position:fixed;left:2px;top:449px;width:5px;height:5px;background-color:red"> 

</div>
<script src="~/Scripts/jquery-3.7.0.min.js"></script>
<script>
    const canvas = document.getElementById('myCanvas');
    const ctx = canvas.getContext('2d');
    const container = $('#canvasContainer');

    let scale = 0.9;
    let originX = 0;
    let originY = 0;
    let isDragging = false;
    let lastX, lastY;
    let points = []; // Khai báo mảng để lưu trữ các điểm
    const img = new Image();
     var FlWidth =@ViewBag.listfloor.FlWidth;
    var FlHeight =@ViewBag.listfloor.FlHeight;
     var isRatioZoom = parseFloat('@ViewBag.lstSite.isRatioZoom');
    var newWidthimg = 0;
    var newheightimg = 0;
    var newCanvasLeft = 0;
    var newCanvasTop = 0;
    var CanvasTop =@ViewBag.listfloor.CanvasTop;
    var CanvasLeft =@ViewBag.listfloor.CanvasLeft;
    var ZoomSate = 0;
    var isRatioDefault = parseFloat('@ViewBag.lstSite.isRatioDefault');
     var InitiatorX = parseFloat('@ViewBag.lstSite.InitiatorX');
    var InitiatorY = parseFloat('@ViewBag.lstSite.InitiatorY');
    // Vẽ hình nền (hoặc hình ảnh) vào canvas
    $(document).ready(function () {


        img.src = '/Assets/Images/Floorplane/HOMEPAGE_3D_STAGED.png'; // Thay URL bằng đường dẫn đến hình ảnh bạn muốn dùng
        img.onload = function () {
            draw(); // Vẽ hình ảnh khi nó được tải
        };
        px = parseFloat(isRatioDefault);
    });
    // Sự kiện chuột cho pan
    container.mousedown(function (e) {
        isDragging = true;
        lastX = e.offsetX;
        lastY = e.offsetY;
    });

    $(document).mouseup(function () {
        isDragging = false;
    });

    container.mousemove(function (e) {
        if (isDragging) {
            const dx = e.offsetX - lastX;
            const dy = e.offsetY - lastY;
            originX += dx;
            originY += dy;
            lastX = e.offsetX;
            lastY = e.offsetY;
            draw();
        }
    });

    // Sự kiện scroll cho zoom
    container.on('wheel', function (e) {
        e.preventDefault();

        const mouseX = e.offsetX;
        const mouseY = e.offsetY;

        const scaleAmount = e.originalEvent.deltaY > 0 ? 0.9 : 1.1;
        const newScale = scale * scaleAmount;

        // Tính toán vị trí mới của gốc
        originX += (mouseX - originX) * (1 - scaleAmount);
        originY += (mouseY - originY) * (1 - scaleAmount);

        scale = newScale;
        console.log(scale)
        draw();
    });
    function drawcondinate() {
        //ctx.fillStyle = 'black'; // Màu chữ
        //ctx.font = '15px Arial'; // Font chữ
        //ctx.textAlign = 'center'; // Căn giữa
        //ctx.fillText("1", 100, 20); // Vẽ văn bản phía trên
        //ctx.fillText("2", 200, 20); // Vẽ văn bản phía trên
        //ctx.fillText("3", 300, 20); // Vẽ văn bản phía trên
        //ctx.fillText("4", 400, 20); // Vẽ văn bản phía trên
        //ctx.fillText("5",500, 20); // Vẽ văn bản phía trên
        //ctx.fillText("6", 600, 20); // Vẽ văn bản phía trên
        //ctx.fillText("7",700, 20); // Vẽ văn bản phía trên
        //ctx.fillText("8", 800, 20); // Vẽ văn bản phía trên
        //ctx.fillText("9", 900, 20); // Vẽ văn bản phía trên
        //ctx.fillText("10", 1000, 20); // Vẽ văn bản phía trên

        //ctx.fillText("1", 20, 100); // Vẽ văn bản phía trên
        //ctx.fillText("2", 20, 200); // Vẽ văn bản phía trên
        //ctx.fillText("3", 20, 300); // Vẽ văn bản phía trên
        //ctx.fillText("4", 20, 400); // Vẽ văn bản phía trên
        //ctx.fillText("5", 20, 500); // Vẽ văn bản phía trên
        //ctx.fillText("6", 20, 600); // Vẽ văn bản phía trên
        //ctx.fillText("7", 20, 700); // Vẽ văn bản phía trên
        ctx.fillStyle = 'red'; // Màu trắng
        ctx.beginPath();
        ctx.arc(128, 127, 5, 0, Math.PI * 2); // Đảo ngược tọa độ y
        ctx.arc(529, 32, 5, 0, Math.PI * 2); // Đảo ngược tọa độ y
        ctx.fill();
    }
    function draw() {
        ctx.clearRect(0, 0, canvas.width, canvas.height);
        ctx.save();
        ctx.translate(originX, originY);
        ctx.scale(scale, scale);

        // Vẽ hình ảnh
        newWidthimg = FlWidth + (FlWidth * (isRatioZoom / 100 * ZoomSate));
        newheightimg = FlHeight + (FlHeight * (isRatioZoom / 100 * ZoomSate));
        console.log(`${newWidthimg}   ${newheightimg} ||   ${img.width} ${img.height}`)
        ctx.drawImage(img, 0, 0, newWidthimg, newheightimg);
        // ctx.drawImage(img, 0, 0, img.width, img.height); // Vẽ hình ảnh với kích thước thực
        drawcondinate();
        // Vẽ các điểm
        // points.forEach(point => drawPoint(point.x, point.y, point.DeviceID));
        for (i = 0; i < points.length; i++) {
            drawPoint(points[i].x, points[i].y, points[i].DeviceID);
        }
        ctx.restore();
    }

    function drawPoint(x, y, DeviceID) {
        // Vẽ bóng đổ cho hình tròn lớn
        ctx.shadowColor = 'rgba(0, 0, 0, 0.5)';
        ctx.shadowOffsetX = 2;
        ctx.shadowOffsetY = 2;
        ctx.shadowBlur = 10;

        // Vẽ hình tròn lớn màu trắng
        ctx.fillStyle = 'white'; // Màu trắng
        ctx.beginPath();
        ctx.arc(x, y, 20, 0, Math.PI * 2); // Hình tròn lớn
        ctx.fill();

        // Vẽ hình tròn nhỏ màu đỏ
        ctx.fillStyle = 'red'; // Màu đỏ
        ctx.beginPath();
        ctx.arc(x, y, 10, 0, Math.PI * 2); // Hình tròn nhỏ
        ctx.fill();

        // Vẽ văn bản
        ctx.fillStyle = 'black'; // Màu chữ
        ctx.font = '15px Arial'; // Font chữ
        ctx.textAlign = 'center'; // Căn giữa
        ctx.fillText(DeviceID, x, y - 25); // Vẽ văn bản phía trên
    }

    // Sự kiện nút nhấn để vẽ hình tròn
    $('#drawPointBtn').click(function () {
        points.push({ x: 220, y: 220 }); // Thêm điểm mới vào mảng
        draw(); // Vẽ lại canvas
    });
</script>
<script>
    let connection;
    connection = new WebSocket("ws://localhost:8080/");
    connection.onopen = () => {
        //console.log("Connected to server");
        //const li = document.createElement("li");
        //document.getElementById("messagesList").appendChild(li);
        connection.send("test");
    };

    connection.onmessage = (event) => {
        const li = document.createElement("li");
        li.textContent = `Client: ${event.data}`;

        //Trường hợp là device kết nối
        if (event.data.includes('has connected')) {
            getDevicebyname(event.data)
        }
        else {
            if (event.data.includes('has disconnected')) {
                deleteDevicebyname(event.data)
            }
            //Xử lý json
            else {
                const results = JSON.parse(event.data); // Chuyển đổi phản hồi thành JSON
                // Lấy giá trị TagID, getX, getY
                $.each(results, function (index, item) {
                    var tagID = item.TagID;
                    var getX = item.getX;
                    var getY = item.getY;
                    points.forEach(point => {
                        if (point.DeviceID === tagID) {
                            // Nếu đã tồn tại, cập nhật x, y
                            var newx = parseInt(getX * 1000 * px) ;
                            var newy = parseInt(getY * 1000 * px) * (-1);  
                            point.x = newx + InitiatorX;
                            point.y = newy + InitiatorY; 
                        }
                    });

                    console.log(points)
                    draw(); // Vẽ lại canvas
                });
            }
        }
        // Vẽ điểm hình tròn tại tọa độ (20, 20)
        document.getElementById("messagesList").appendChild(li);
    };
    function deleteDevicebyname(DeviceName) {
        
        var param = {
            DeviceName: DeviceName
        }
        $.ajax({
            url: '/Home/getDevicebyname',
            data: param,
            dataType: 'json',
            type: 'GET',
            cache: false,
            success: function (result) {  
                points = points.filter(point => point.x !== (result.posX*1000) || point.y !== (result.posY*1000));
                console.log(points)
                draw(); // Vẽ lại canvas
            }
        });
    }
    function getDevicebyname(DeviceName) {
        var param = {
            DeviceName: DeviceName
        }
        $.ajax({
            url: '/Home/getDevicebyname',
            data: param,
            dataType: 'json',
            type: 'GET',
            cache: false,
            success: function (result) {
                var point1x = parseInt((result.posX * 1000) * px)
                var point1y = parseInt((result.posY * 1000) * px * (-1)); 
                points.push({ x: (point1x + InitiatorX), y: (point1y + InitiatorY), DeviceID: result.DeviceID }); // Thêm điểm mới vào mảng 
                draw(); // Vẽ lại canvas
            }
        });
    }
    //get position from db
</script>