<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>WebSocket Client</title>
    <link href="~/Content/bootstrap.min.css" rel="stylesheet" />
</head>
<body>
    <h4>Device</h4>
    <select id="slDevice" class="form-select-sm">
        @if (ViewBag.ListDevice != null)
        {
            foreach (WebsocketProtocal.Models.tb_Device dv in ViewBag.ListDevice)
            {
                <option value="@dv.DeviceID">
                    @dv.DeviceName - @dv.DeviceID
                </option>
            }
        }
    </select>
    <button  id="connect" class="btn btn-danger btn-sm">Connect</button>
    <input  style="display:none"type="text" id="message" placeholder="Type a message" />
        <button style="display:none" id="send">Send</button>
    <ul id="messagesList"></ul>
    <script src="~/Scripts/jquery-3.7.0.min.js"></script>
    <script>
        let connection;
        var x = 0;
        var y = 0;
        var isType = "";
        var distanceA = 0.86;
        var distanceB = 2.25; 
        function getRandomFloatInRange(min, max) {
            return Math.random() * (max - min) + min;
        }
        function performAction() {  

            //connection.send(`${x + randomNumberx},${y + randomNumbery}`);
            //console.log(`${x + randomNumberx},${y + randomNumbery}`)
            var rA = getRandomFloatInRange(0,0.1);
            distanceA += rA;
            distanceB -= rA;
            //var rB = getRandomFloatInRange(100, 200);
            //var rC = getRandomFloatInRange(100, 200); 
            var rA = 0;
            var rB = 0;
            var rC = 0;
            var data = {
                "tagID": $("#slDevice").val(),
                "getX": distanceA,
                "getY": distanceB,
                "timestamp": 1
            };

            // Chuyển đổi đối tượng thành chuỗi JSON
            var jsonString = JSON.stringify(data); 
            connection.send(jsonString);
            
        }

        // Gọi hàm mỗi 3 giây (3000 ms)
       
        document.getElementById("connect").addEventListener("click", () => {
            // Kiểm tra nếu đã có kết nối trước đó
            if (connection && connection.readyState === WebSocket.OPEN) {
                alert("Already connected!");
                return;
            } 

            // Tạo kết nối mới
            connection = new WebSocket("ws://localhost:8080/");

            connection.onopen = () => {
                console.log("Connected to server");
                connection.send("The device," + $("#slDevice").val()); 
                var param = {
                    DeviceName: $("#slDevice").val()
                }
                $.ajax({
                    url: '/Home/getDevicebyname',
                    data: param,
                    dataType: 'json',
                    type: 'GET',
                    cache: false,
                    async: false, // Không nên sử dụng
                    success: function (result) {
                        x = result.posX;
                        y = result.posY;
                        isType = result.isType;
                    }
                });
                if (isType == "Tag") {
                    alert("tag do")
                    const intervalId = setInterval(performAction, 200);
                }
              
                $("#connect").html("Disconect");
                //const li = document.createElement("li");
                //li.textContent = "Connected to server";
                // document.getElementById("messagesList").appendChild(li);
            };

            connection.onmessage = (event) => { 
                const li = document.createElement("li");
                li.textContent = `${event.data}`;

                document.getElementById("messagesList").append(li);
            };

            connection.onerror = (error) => {
                console.error("WebSocket error: ", error);
            };

            connection.onclose = () => {
                connection.send("has closed");
                console.log("Disconnected from server");
            };
        });

        document.getElementById("send").addEventListener("click", () => {
            if (connection && connection.readyState === WebSocket.OPEN) {
                const message = document.getElementById("message").value;
                connection.send(message);
                document.getElementById("message").value = '';
            } else {
                alert("Not connected to the server.");
            }
        });
    </script>
</body>
</html>
